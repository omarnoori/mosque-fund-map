{"version":3,"sources":["images/mosque1.png","images/mosque2.png","images/mosque3.png","images/mosque4.png","images/mosque5.png","images/mosque6.png","App.js","index.js"],"names":["module","exports","fetcher","fetch","then","response","json","App","useState","latitude","longitude","width","height","zoom","viewport","setViewport","mapRef","useRef","useSwr","data","error","points","slice","map","mosque","index","mosqueImages","require","type","properties","cluster","placeId","category","iconUrl","geometry","coordinates","parseFloat","bounds","current","getMap","getBounds","toArray","flat","useSupercluster","options","radius","maxZoom","clusters","supercluster","console","log","mapStyle","mapboxApiAccessToken","onViewportChange","newViewport","ref","isCluster","pointCount","point_count","key","id","className","style","length","onClick","expansionZoom","Math","min","getClusterExpansionZoom","transitionInterpolator","FlyToInterpolator","speed","transitionDuration","src","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kLAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,0HCuJrCC,G,MAAU,kBAAaC,MAAK,WAAL,aAAeC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YAEvD,SAASC,IAAO,IAAD,EACIC,mBAAS,CACvCC,SAAU,WACVC,WAAY,YACZC,MAAO,QACPC,OAAQ,QACRC,KAAM,IANoB,mBACrBC,EADqB,KACXC,EADW,KAQtBC,EAASC,mBARa,EAUMT,mBAAS,IAVf,gCAeJU,YADtB,uFACkC,CAAEhB,aAA9BiB,EAfoB,EAepBA,KAAMC,EAfc,EAedA,MAERC,GADUF,IAASC,EAAQD,EAAKG,MAAM,EAAG,KAAO,IAC/BC,KAAI,SAACC,EAAQC,GAElC,IAAMC,EAAe,CACnBC,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,KAGV,MAAO,CACLC,KAAM,UACNC,WAAY,CAAEC,SAAS,EAAOC,QAASP,EAAOO,QAASC,SAAU,SAAUC,QAASP,EAAaD,EAAQ,IACzGS,SAAU,CACRN,KAAM,QACNO,YAAa,CACXC,WAAWZ,EAAOd,WAClB0B,WAAWZ,EAAOf,gBAMpB4B,EAASrB,EAAOsB,QAClBtB,EAAOsB,QACNC,SACAC,YACAC,UACAC,OACD,KA/CwB,EAiDOC,YAAgB,CACjDtB,SACAgB,SACAxB,KAAMC,EAASD,KACf+B,QAAS,CAAEC,OAAQ,GAAIC,QAAS,MAJ1BC,EAjDoB,EAiDpBA,SAAUC,EAjDU,EAiDVA,aASlB,OAFAC,QAAQC,IAAIH,GAGV,6BACE,kBAAC,IAAD,iBACMjC,EADN,CAEEgC,QAAS,GACTK,SAAS,uDACTC,qBAAsB,gGACtBC,iBAAkB,SAAAC,GAChBvC,EAAY,eAAKuC,KAEnBC,IAAKvC,IAEJ+B,EAASxB,KAAI,SAAAO,GAAY,IAAD,cACOA,EAAQI,SAASC,YADxB,GAChBzB,EADgB,KACLD,EADK,OAKnBqB,EAAQD,WAFD2B,EAHY,EAGrB1B,QACa2B,EAJQ,EAIrBC,YAGF,OAAIF,EAEA,kBAAC,IAAD,CACEG,IAAG,kBAAa7B,EAAQ8B,IACxBnD,SAAUA,EACVC,UAAWA,GAEX,yBACEmD,UAAU,iBACVC,MAAO,CACLnD,MAAM,GAAD,OAAK,GAAM8C,EAAapC,EAAO0C,OAAU,GAAzC,MACLnD,OAAO,GAAD,OAAK,GAAM6C,EAAapC,EAAO0C,OAAU,GAAzC,OAERC,QAAS,WACP,IAAMC,EAAgBC,KAAKC,IACzBnB,EAAaoB,wBAAwBtC,EAAQ8B,IAC7C,IAGF7C,EAAY,2BACPD,GADM,IAETL,WACAC,YACAG,KAAMoD,EACNI,uBAAwB,IAAIC,IAAkB,CAC5CC,MAAO,IAETC,mBAAoB,YAIvBf,IAOP,kBAAC,IAAD,CACEE,IAAG,iBAAY7B,EAAQD,WAAWE,SAClCtB,SAAUA,EACVC,UAAWA,GAEX,4BAAQmD,UAAU,iBAChB,yBACEY,IAAK3C,EAAQD,WAAWI,QACxByC,IAAI,uBC/QtBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.b7abdcee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mosque1.f26d7619.png\";","module.exports = __webpack_public_path__ + \"static/media/mosque2.f90eacbc.png\";","module.exports = __webpack_public_path__ + \"static/media/mosque3.faee101b.png\";","module.exports = __webpack_public_path__ + \"static/media/mosque4.19709cd1.png\";","module.exports = __webpack_public_path__ + \"static/media/mosque5.455e3bf2.png\";","module.exports = __webpack_public_path__ + \"static/media/mosque6.7132b140.png\";","// import React, { useState, useEffect } from 'react';\n// import ReactMapGL, { Marker, Popup } from 'react-map-gl';\n// import useSuperCluster from 'use-supercluster';\n\n\n// import { listMosques } from './API';\n\n// const App = () => {\n\n//   function displayLocationInfo(position) {\n//     const lng = position.coords.longitude;\n//     const lat = position.coords.latitude;\n\n//     setViewPort({ ...viewport, latitude: lat, longitude: lng });\n\n//     console.log(`longitude: ${lng} | latitude: ${lat}`);\n//   }\n\n//   const [mosques, setMosques] = useState([]);\n//   const [showPopup, setShowPopup] = useState({});\n//   const [latitude, setLatitude] = useState(33.9174485);\n//   const [longitude, setLongitude] = useState(-118.0283703);\n//   const [points, setPoints] = useState([]);\n\n//   // const [showMarker, setShowMarker] = useState({});\n//   const [viewport, setViewPort] = useState({\n//     width: '100vw',\n//     height: '100vh',\n//     latitude,\n//     longitude,\n//     zoom: 9\n//   });\n//   const TOKEN = \"pk.eyJ1IjoibW9zcXVlZnVuZCIsImEiOiJja2N3ank1ZXUwMnVnMnNwbXh2eXB5OG04In0.J56Th828d2K-c5sJ8tLsjg\";\n\n//   const mosqueImages = [\n//     require('./images/mosque1.png'),\n//     require('./images/mosque2.png'),\n//     require('./images/mosque3.png'),\n//     require('./images/mosque4.png'),\n//     require('./images/mosque5.png'),\n//     require('./images/mosque6.png'),\n//   ];\n\n//   useEffect(() => {\n//     (async () => {\n//       if (navigator.geolocation) {\n//         navigator.geolocation.getCurrentPosition(displayLocationInfo);\n//       }\n//       document.title = \"Mosque Fund Map\";\n//       const mosques = await listMosques();\n//       for (const mosque of mosques) {\n//         mosque.iconUrl = mosqueImages[Math.floor(Math.random() * 6)];\n//         // setShowMarker({ ...showMarker, [mosque.placeId]: true });\n//       }\n//       setMosques(mosques);\n//       setPoints(mosques.map(mosque => ({\n//         properties: {\n//           cluster: false,\n//           placeId: mosque.placeId,\n//         },\n//         geometry: { type: 'Point', coordinates: [Number(mosque.latitude), Number(mosque.longitude)] }\n//       })));\n//     })();\n//   }, []);\n\n//   const bounds = mapRef.current ? mapRef.current.getMap().getBounds().toArray().flat() : null;\n\n//   const { clusters } = useSuperCluster({\n//     points,\n//     zoom: viewport.zoom,\n//     bounds,\n//     options: { radius: 75, maxZoom: 20 }\n//   });\n\n//   const showAddMarkerPopup = (event) => {\n//     console.log(event);\n//   }\n\n//   const mapRef = React.useRef();\n\n//   return (\n//     <ReactMapGL\n//       mapboxApiAccessToken={TOKEN}\n//       {...viewport}\n//       mapStyle=\"mapbox://styles/mosquefund/ckd0wdsp41fa41jlawdengx5x\"\n//       onViewportChange={setViewPort}\n//       onDblClick={showAddMarkerPopup}\n//     >\n//       {\n//         mosques.map(entry => (\n//           <>\n//             <Marker\n//               key={entry.placeId}\n//               latitude={Number(entry.latitude)}\n//               longitude={Number(entry.longitude)}\n//               style={{\n//                 zIndex: '-1'\n//               }}\n//             >\n//               <div onClick={() => setShowPopup({\n//                 // ...showPopup,\n//                 [entry.placeId]: true\n//               })}>\n//                 <img className=\"marker\"\n//                   alt=\"marker\"\n//                   style={{\n//                     width: `${7.5 * viewport.zoom}px`,\n//                     height: `${7.5 * viewport.zoom}px`,\n//                   }}\n//                   src={entry.iconUrl} />\n//               </div>\n//             </Marker>\n//             {\n//               showPopup[entry.placeId] ? (\n//                 <Popup\n//                   latitude={Number(entry.latitude)}\n//                   longitude={Number(entry.longitude)}\n//                   style={{\n//                     zIndex: '1'\n//                   }}\n//                   closeButton={true}\n//                   closeOnClick={false}\n//                   dynamicPosition={true}\n//                   onClose={() => setShowPopup({ ...showPopup, [entry.placeId]: false })}\n//                   anchor=\"top\"\n//                 >\n//                   <div className=\"popup\">\n//                     <h3>{entry.name}</h3>\n//                     <p>{entry.fullAddress}</p>\n//                     {entry.website ? <p>Website: <a href={`https://www.${entry.website}`} target=\"_blank\" rel=\"noopener noreferrer\">{entry.website}</a></p> : null}\n//                     {Number(entry.rating) > 4 ? <p>Rating: {entry.rating}</p> : null}\n\n//                   </div>\n//                 </Popup>\n//               ) : null\n//             }\n//           </>\n//         ))\n//       }\n//     </ReactMapGL >\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useRef } from \"react\";\nimport useSwr from \"swr\";\nimport ReactMapGL, { Marker, FlyToInterpolator } from \"react-map-gl\";\nimport useSupercluster from \"use-supercluster\";\nimport './App.css';\n\nconst fetcher = (...args) => fetch(...args).then(response => response.json());\n\nexport default function App() {\n  const [viewport, setViewport] = useState({\n    latitude: 33.9174485,\n    longitude: -118.0283703,\n    width: \"100vw\",\n    height: \"100vh\",\n    zoom: 7\n  });\n  const mapRef = useRef();\n\n  const [showPopup, setShowPopup] = useState({});\n\n\n  const url =\n    \"https://us-central1-mosque-fund-fb.cloudfunctions.net/api/mosques?dev=true&limit=250\";\n  const { data, error } = useSwr(url, { fetcher });\n  const mosques = data && !error ? data.slice(0, 250) : [];\n  const points = mosques.map((mosque, index) => {\n\n    const mosqueImages = [\n      require('./images/mosque1.png'),\n      require('./images/mosque2.png'),\n      require('./images/mosque3.png'),\n      require('./images/mosque4.png'),\n      require('./images/mosque5.png'),\n      require('./images/mosque6.png'),\n    ];\n\n    return {\n      type: \"Feature\",\n      properties: { cluster: false, placeId: mosque.placeId, category: 'Mosque', iconUrl: mosqueImages[index % 6] },\n      geometry: {\n        type: \"Point\",\n        coordinates: [\n          parseFloat(mosque.longitude),\n          parseFloat(mosque.latitude)\n        ]\n      }\n    }\n  });\n\n  const bounds = mapRef.current\n    ? mapRef.current\n      .getMap()\n      .getBounds()\n      .toArray()\n      .flat()\n    : null;\n\n  const { clusters, supercluster } = useSupercluster({\n    points,\n    bounds,\n    zoom: viewport.zoom,\n    options: { radius: 60, maxZoom: 20 }\n  });\n\n  console.log(clusters);\n\n  return (\n    <div>\n      <ReactMapGL\n        {...viewport}\n        maxZoom={20}\n        mapStyle=\"mapbox://styles/mosquefund/ckczhvmog02781io8pfq9abpt\"\n        mapboxApiAccessToken={\"pk.eyJ1IjoibW9zcXVlZnVuZCIsImEiOiJja2N3ank1ZXUwMnVnMnNwbXh2eXB5OG04In0.J56Th828d2K-c5sJ8tLsjg\"}\n        onViewportChange={newViewport => {\n          setViewport({ ...newViewport });\n        }}\n        ref={mapRef}\n      >\n        {clusters.map(cluster => {\n          const [longitude, latitude] = cluster.geometry.coordinates;\n          const {\n            cluster: isCluster,\n            point_count: pointCount\n          } = cluster.properties;\n\n          if (isCluster) {\n            return (\n              <Marker\n                key={`cluster-${cluster.id}`}\n                latitude={latitude}\n                longitude={longitude}\n              >\n                <div\n                  className=\"cluster-marker\"\n                  style={{\n                    width: `${10 + (pointCount / points.length) * 20}px`,\n                    height: `${10 + (pointCount / points.length) * 20}px`,\n                  }}\n                  onClick={() => {\n                    const expansionZoom = Math.min(\n                      supercluster.getClusterExpansionZoom(cluster.id),\n                      20\n                    );\n\n                    setViewport({\n                      ...viewport,\n                      latitude,\n                      longitude,\n                      zoom: expansionZoom,\n                      transitionInterpolator: new FlyToInterpolator({\n                        speed: 2\n                      }),\n                      transitionDuration: \"auto\"\n                    });\n                  }}\n                >\n                  {pointCount}\n                </div>\n              </Marker>\n            );\n          }\n\n          return (\n            <Marker\n              key={`mosque-${cluster.properties.placeId}`}\n              latitude={latitude}\n              longitude={longitude}\n            >\n              <button className=\"mosque-marker\">\n                <img\n                  src={cluster.properties.iconUrl}\n                  alt=\"mosque icon\"\n                />\n              </button>\n            </Marker>\n          );\n        })}\n      </ReactMapGL>\n    </div >\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}